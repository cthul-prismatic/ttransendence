#nop Functionaility for autonomous bashing;

#var ReverseDir {
   {n} {s}
   {e} {w}
   {s} {n}
   {w} {e}

   {ne} {sw}
   {nw} {se}
   {se} {nw}
   {sw} {ne}

   {up} {down}
   {down} {up}

   {in} {out}
   {out} {in}
}

#var RecordedPath { };
#var ReturnPath { };
#var RetreatHealth 0.70;
#var ContinueHeatlh 0.85;

/**
   You must regain balance first.

      You have cured the paralysis affliction.
**/

/** 
   Raised after successfully moving to a new location
   Teleporting clears the stack
*/
deregisterEvent recordPath;
registerEvent recordPath;
#alias {recordPath} {
   #nop AttemptedDir comes from MoveCommands.tt and mapping.tt;
   #if {"$AutoBashStrat" !== "Retreating" && &{AttemptedDir}} {
      #local dir $ReverseDir[$AttemptedDir];
      #list RecordedPath ins +1 $dir;
      #if {$RecordedPath > 20} {
         #list RecordedPath delete -1;
      };
   };
};

/**
   Clear the stack from teleporting
*/
deregisterEvent clearPath;
registerEvent clearPath;
#alias {clearPath} {
   #list RecordedPath clear;
};

#var AutoBashStrat {
   Hunting;
}

#alias {autobash.hunt} {
   #nop If health is too low, get out of there.;
   #local hp @getHpPercent{};
   #if {$hp < $RetreatHealth} {
      autobash.switchToretreat;
      #return;
   };

   atk;

   #if {&{atkTarget} == 0 } {
      #if {$hp > $ContinueHeatlh} {
         #if {"$AutoBashStrat" === "Return"} {
            autobash.return;
            #return;
         };
         #else {
            registerEvent finishAutoHarvest continueFromHarvest;
            autoharvest;
            #return;
         };
      };
      #else {
         autobash.switchToheal;
         #return;
      };
   };
}

#alias autobash.switchToheal {
   print Switching to Heal;

   #class autobash clear; 
   deregisterEvent explore autobash.hunt;
   #var AutoBashStrat {Healing};
   registerEvent heal autobash.heal;
   #class autobashHeal load;
}

#alias autobash.heal {
   #nop CURING SIPHEALTH;
   #local hp @getHpPercent{};
   #if {$hp > $ContinueHeatlh} {
      info Health is in a good state, move on.;
      deregisterEvent heal;
      #class autobashHeal clear;

      #class autobash load; 
      #var AutoBashStrat {Hunting};
      registerEvent explore autobash.hunt;
      autobash.hunt;
   };
}

#alias autobash.switchToretreat {

   dbg Clearing ReturnPath;
   #var ReturnPath { };
   #class autobash clear; 
   deregisterEvent explore;

   print Switching to Retreat;
   #send {CLEARQUEUE ALL};

   #var AutoBashStrat {Retreating};
   registerEvent heal autobash.retreat;
   #class autobashHeal load;
   #class autobashMoving load;

   autobash.retreat;
   registerEvent enteredNewRoom allowRetreat;
}

/** When this is called, it is because the retreat move was succesful **/
#var AllowRetreat 1;
#alias allowRetreat {
   #var AllowRetreat 1;

   #local next $RecordedPath[+1];
   #list RecordedPath delete +1;
   #local dir $ReverseDir[$next];
   dbg Adding $dir to Returnpath;
   #list ReturnPath ins +1 $dir;
};

#alias {autobash.attemptRetreat} {
      #nop Back out to previous room;
      #nop In lower level places, this is enough;
      #nop But in higher level areas the mobs will follow and we need to run more.;
      #local next $RecordedPath[+1];
      move $next; 
}

#alias autobash.retreat {
   #if {&{roomMobs[]} > 0 && $AllowRetreat == 1} {
      print Retreating!;
      #var AllowRetreat 0;
      autobash.attemptRetreat;
      #return;
   };

   #local hp @getHpPercent{};
   #if {$hp > $ContinueHeatlh} {
      deregisterEvent heal autobash.retreat;
      deregisterEvent enteredNewRoom;

      #class autobash load; 
      #var AutoBashStrat {Return};
      registerEvent explore autobash.hunt;
      registerEvent enteredNewRoom allowReturn;
      #class autobashHeal clear;
      #class autobashMoving clear;

      autobash.return;
   };
}

#var AllowReturn 1;
#alias allowReturn {
   #var AllowReturn 1;

   #if {&{ReturnPath[]} > 0} {
      #list ReturnPath delete +1;
      dbg Removed item from ReturnPath, count is &{ReturnPath[]};

      #if {&{ReturnPath[]} == 0} {
         print Returned to the room we started retreating;
         deregisterEvent enteredNewRoom;
         #var AutoBashStrat {Hunting};
      }
   };
};

#alias {autobash.return} {
   #if {&{roomMobs[]} == 0 && $AllowReturn == 1} {
      print Going back to the fight!;
      #var AllowReturn 0;

      #nop Back out to previous room;
      #nop In lower level places, this is enough;
      #nop But in higher level areas the mobs will follow and we need to run more.;

      #var ReturnPath;
      #local next $ReturnPath[+1];
      dbg Headed in $next;
      move $next; 
      dbg did it move?;
      #return;
   };
}

#function {getHpPercent} {
   #var hp $gmcp[char][vitals][hp];
   #math hp {$hp * 1.0};
   #var maxhp $gmcp[char][vitals][maxhp];
   #math maxhp {$maxhp * 1.0};
   #math hpPercent {$hp/$maxhp};
   #return $hpPercent;
}

#class autobashHeal kill;
#class autobashHeal open;
#action {You may drink another health or mana elixir.} {
   raiseEvent heal;
}
#class autobashHeal close;
#class autobashHeal save;

#alias {satk} {
   #unvar atkTarget;
   #class autobash clear; 

   deregisterEvent heal;
   deregisterEvent enteredNewRoom;
   deregisterEvent finishAutoHarvest;
}

#alias {aatk} {
   #class autobash load; 
   print {Auto Attacking};
   #if {$distortActive === 0} {da};

   deregisterEvent heal;
   deregisterEvent enteredNewRoom;
   atk;
}

#class autobash kill;
#class autobash open;

#action {You have recovered} {
   #var AutoBashStrat {Hunting};
   autobash.hunt;
}

/** Both of your legs must be free and unhindered to do that **/
#action {You have cured the broken} {
   #if {$QueuedAtk === 0} {
      autobash.hunt;
   };
}

#class autobash close;
#class autobash save;

#class autobashMoving kill;
#class autobashMoving open;

/** You are paralysed and cannot do that. **/
#action {You have cured the paralysis affliction.} {
   autobash.attemptRetreat;
}

#action {You slowly hobble} {
   autobash.attemptRetreat;
}

#action {You must regain balance first.} {
   autobash.attemptRetreat;
}

#class autobashMoving close;
#class autobashMoving save;


